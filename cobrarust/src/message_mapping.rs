#![allow(unused)]
use phf_macros::phf_map;

pub const MESSAGE_MAPS: [phf::Map<&str, &str>; 7] = [
    MESSAGE_MAP_CWE,
    MESSAGE_MAP_BASIC,
    MESSAGE_MAP_AUTOSAR_CPP,
    MESSAGE_MAP_SUSPICIOUS,
    MESSAGE_MAP_MISRA_1997,
    MESSAGE_MAP_MISRA_2004,
    MESSAGE_MAP_MISRA_2012
];

// TODO: update the issue codes.
pub const MESSAGE_MAP_MISRA_1997: phf::Map<&str, &str> = phf_map![
    "(Advisory) Assembly language fcts called from C should be written as C fcts containing only in-line assembly language, and in-line assembly language should not be embedded in normal C code" => "CXX-W1000",
    "(Required) Only those escape sequences which are defined in the ISO C standard shall be used" => "CXX-W1000",
    "(Required) Trigraphs shall not be used" => "CXX-W1000",
    "(Required) Multibyte characters and wide string literals shall not be used" => "CXX-W1000",
    "(Required) Comments shall not be nested" => "CXX-W1000",
    "(Advisory) Sections of code should not be commented out" => "CXX-W1000",
    "(Required) Identifiers shall not rely on significance of more than 31 characters" => "CXX-W1000",
    "(Advisory) No identifier in one name space shall have the same spelling as an identifier in another name space" => "CXX-W1000",
    "(Advisory) The basic types char, int, short, long, float, and double should not be used" => "CXX-W1000",
    "(Required) The type char shall be declared as unsigned or signed char" => "CXX-W1000",
    "(Required) The underlying bit representations of floating-point values shall not be used." => "CXX-W1000",
    "(Required) Typedef names shall not be reused for any other purpose in the application." => "CXX-W1000",
    "(Required) Octal constants (other than zero) shall not be used" => "CXX-W1000",
    "(Required) Declarations within an inner scope should not hide any declarations in an outer scope" => "CXX-W1000",
    "(Advisory) Declarations of objects should be at function scope unless a wider scope is necessary" => "CXX-W1000",
    "(Required) Identifiers shall not have both internal and external linkage" => "CXX-W1000",
    "(Required) An identifier with external linkage shall have exactly one external definition" => "CXX-W1000",
    "(Advisory) The register storage class specifier should not be used" => "CXX-W1000",
    "(Required) In an enumerator list, '=' shall not be used to initialise items other than the first, unless all items are initialised" => "CXX-W1000",
    "(Required) The right hand operand of a && or || operator shall not contain side effects" => "CXX-W1000",
    "(Required) Assignment operators shall not be used in conditional expressions of control stmnts (as revised)" => "CXX-W1000",
    "(Advisory) Logical operators should not be confused with bitwise operators. (As revised:) There shall be no bitwise logical operators (&, |, or ~) in conditional expressions of control stmnts" => "CXX-W1000",
    "(Advisory) (As revised:) If the sizeof operator is used on an expression, then this expression may not contain any side-effects" => "CXX-W1000",
    "(Required) The comma operator shall not be used, except in the control expression of a for-loop or in declarations or fct args" => "CXX-W1000",
    "(Advisory) Tests of a value against zero should be made explicit, unless the operand is effectively Boolean." => "CXX-W1000",
    "(Required) Floating point variables shall not be tested for exact equality or inequality." => "CXX-W1000",
    "(Required) All non-null statements either have a side-effect or change the flow of control." => "CXX-W1000",
    "(Required) A null stmnt shall only occur on a line by itself, and shall not have any other text (e.g., a comment) on the same line" => "CXX-W1000",
    "(Required) Null statement cannot immediately follow a comment." => "CXX-W1000",
    "(Advisory) Labels should not be used, except in switch stmnts" => "CXX-W1000",
    "(Required) The goto stmnt shall not be used" => "CXX-W1000",
    "(Required) The continue stmnt shall not be used" => "CXX-W1000",
    "(Required) The break stmnt shall not be used, except to terminate the cases of a switch stmnt" => "CXX-W1000",
    "(Required) The body of an if, else, while, do-while or for shall be enclosed in braces" => "CXX-W1000",
    "(Advisory) All if, else if constructs should contain a final else clause" => "CXX-W1000",
    "(Required) Every non-empty case clause in a switch stmnt shall be terminated by a break stmnt" => "CXX-W1000",
    "(Required) All switch stmnts should contain a final default clause" => "CXX-W1000",
    "(Advisory) There must be more than two cases in a switch stmnt" => "CXX-W1000",
    "(Required) Every switch stmnt shall have at least one case" => "CXX-W1000",
    "(Required) Floating point variables shall not be used as loop counters." => "CXX-W1000",
    "(Advisory) Iteration count var should not be modified in the body of a for-loop" => "CXX-W1000",
    "(Required) Functions with variable numbers of arguments shall not be used" => "CXX-W1000",
    "(Required) Functions shall not call themselves, either directly or indirectly" => "CXX-W1000",
    "(Required) Functions shall always have prototype declarations and the prototype shall be visible at both the function definition and call." => "CXX-W1000",
    "(Required) Identifiers shall either be given for all of the parameters in a fct prototype declaration, or for none" => "CXX-W1000",
    "(Required) Every fct shall have an explicit return type" => "CXX-W1000",
    "(Required) Functions with no parameters shall be declared with parameter type void" => "CXX-W1000",
    "(Required) The values returned by void functions shall not be used." => "CXX-W1000",
    "(Required) Void expressions shall not be passed as fct parameters" => "CXX-W1000",
    "(Advisory) A fct should have a single point of exit: the textual end of the fct" => "CXX-W1000",
    "(Required) For fcts with non-void return type: i) there shall be one return stmnt for every exit branch, including the end of the program ii) each return shall have an expression iii) the return expression shall match the declared return type" => "CXX-W1000",
    "(Required) For functions with void return type, return statements shall not have an expression." => "CXX-W1000",
    "(Advisory) If a function returns error information, then that error information should be tested." => "CXX-W1000",
    "(Required) #include directives in a file shall only be preceded by other preprocessor directives or comments" => "CXX-W1000",
    "(Required) Non-standard characters shall not occur in header file names in #include directives" => "CXX-W1000",
    "(Required) The #include directive shall be followed by either a <filename> or quoted filename sequence" => "CXX-W1000",
    "(Required) Macros shall not be #define'd or #undef'd within a block" => "CXX-W1000",
    "(Advisory) #undef should not be used" => "CXX-W1000",
    "(Required) In the def of a fct-like macro the whole def, and each instance of a parameter, shall be enclosed in parentheses." => "CXX-W1000",
    "(Required) There shall be at most one occurrence of the # or ## pre-processor operators in a single macro definition" => "CXX-W1000",
    "(Required) All uses of the #pragma directive shall be documented and explained" => "CXX-W1000",
    "(Required) The 'defined' pre-processor operator shall only be used in one of the two standard forms: 'defined (identifier)' or 'defined identifier'" => "CXX-W1000",
    "(Advisory) No more than 2 levels of pointer indirection should be used" => "CXX-W1000",
    "(Required) Unions shall not be used to access the sub-parts of larger data types" => "CXX-W1000",
    "(Required) Overlapping variable storage shall not be used." => "CXX-W1000",
    "(Required) Bit fields of type signed int shall be at least 2 bits long" => "CXX-W1000",
    "(Required) Dynamic heap memory allocation shall not be used" => "CXX-W1000",
    "(Required) The error indicator errno shall not be used" => "CXX-W1000",
    "(Required) The macro 'offsetof' in library <stddef.h> shall not be used" => "CXX-W1000",
    "(Required) <locale.h> and the setlocale fct shall not be used" => "CXX-W1000",
    "(Required) The setjmp macro and the longjmp fct shall not be used" => "CXX-W1000",
    "(Required) The signal handling facilities of <signal.h> shall not be used" => "CXX-W1000",
    "(Required) The input/output library <stdio.h> shall not be used in production code in embedded systems" => "CXX-W1000",
    "(Required) The fcts atof, atoi, and atol from <stdlib.h> shall not be used" => "CXX-W1000",
    "(Required) The fcts abort, exit, getenv, and system from <stdlib.h> shall not be used" => "CXX-W1000",
    "(Required) The time handling fcts of library <time.h> shall not be used" => "CXX-W1000",
];

// TODO: update the issue codes.
pub const MESSAGE_MAP_MISRA_2004: phf::Map<&str, &str> = phf_map![
    "(Required) Assembly language shall be encapsulated and isolated" => "CXX-W1000",
    "(Required) Source code shall only use /* ... */ style comments" => "CXX-W1000",
    "(Required) The character sequence /* shall not be used within a comment" => "CXX-W1000",
    "(Advisory) Sections of code should not be commented out" => "CXX-W1000",
    "(Required) All uses of the #pragma directive shall be documented and explained" => "CXX-W1000",
    "(Required) Only those escape sequences that are defined in the ISO C standard shall be used" => "CXX-W1000",
    "(Required) Trigraphs shall not be used" => "CXX-W1000",
    "(Required) Identifiers (internal and external) shall not rely on the significance of more than 31 characters" => "CXX-W1000",
    "(Advisory) typedefs that indicate size and signedness should be used in place of the basic types" => "CXX-W1000",
    "(Required) Bit fields shall only be defined to be of type unsigned int or signed int" => "CXX-W1000",
    "(Required) Bit fields of type signed int shall be at least 2 bits long" => "CXX-W1000",
    "(Required) Octal constants (other than zero) and octal escape sequences shall not be used" => "CXX-W1000",
    "(Required) Functions shall be declared at file scope" => "CXX-W1000",
    "(Required) Objects shall be defined at block scope if they are only accessed from within a single function" => "CXX-W1000",
    "(Required) In an enumerator list, the = construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" => "CXX-W1000",
    "(Required) The sizeof operator shall not be used on expressions that contain side effects" => "CXX-W1000",
    "(Required) The right-hand operand of a logical && or || operator shall not contain side effects" => "CXX-W1000",
    "(Required) The comma operator shall not be used" => "CXX-W1000",
    "(Required) Assignment operators shall not be used in expressions that yield a Boolean value" => "CXX-W1000",
    "(Required) Floating-point expressions shall not be tested for equality or inequality" => "CXX-W1000",
    "(Required) Numeric vars used in a for loop for iteration counting shall not be modified in the loop-body" => "CXX-W1000",
    "(Required) The goto stmnt shall not be used" => "CXX-W1000",
    "(Required) The continue stmnt shall not be used" => "CXX-W1000",
    "(Required) For any iteration stmnt there shall be at most one break stmnt used for loop termination" => "CXX-W1000",
    "(Required) A fct shall have a single point of exit at the end of the fct" => "CXX-W1000",
    "(Required) The stmnt forming the body of a switch, while, do ... while or for stmnt shall be a compound stmnt" => "CXX-W1000",
    "(Required) An if (expr) shall be followed by a compound stmnt. An else keyword shall be followed by either a compound stmnt, or another if" => "CXX-W1000",
    "(Required) All if... else if constructs shall be terminated with an else clause" => "CXX-W1000",
    "(Required) An unconditional break stmnt shall terminate every non-empty switch clause" => "CXX-W1000",
    "(Required) The final clause of a switch stmnt shall be the default clause" => "CXX-W1000",
    "(Required) A switch expression shall not represent a value that is effectively Boolean" => "CXX-W1000",
    "(Required) Every switch stmnt shall have at least one case clause" => "CXX-W1000",
    "(Required) Functions shall not be defined with variable numbers of arguments" => "CXX-W1000",
    "(Required) Functions shall not call themselves, either directly or indirectly" => "CXX-W1000",
    "(Required) Functions with no parameters shall be declared with parameter type void" => "CXX-W1000",
    "(Required) All exit paths from a fct with non-void return type shall have an explicit return stmnt with an expression" => "CXX-W1000",
    "(Advisory) The declaration of objects should contain no more than 2 levels of pointer indirection" => "CXX-W1000",
    "(Required) Unions shall not be used" => "CXX-W1000",
    "(Advisory) #include stmnts in a file should only be preceded by other preprocessor directives or comments" => "CXX-W1000",
    "(Advisory) Non-standard characters should not occur in header file names in #include directives" => "CXX-W1000",
    "(Required) The #include directive shall be followed by either a <filename> or filename sequence" => "CXX-W1000",
    "(Required) Macros shall not be #define'd or #undef 'd within a block" => "CXX-W1000",
    "(Required) #undef shall not be used" => "CXX-W1000",
    "(Required) There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" => "CXX-W1000",
    "(Advisory) The # and ## preprocessor operators should not be used" => "CXX-W1000",
    "(Required) Dynamic heap memory allocation shall not be used" => "CXX-W1000",
    "(Required) The error indicator errno shall not be used" => "CXX-W1000",
    "(Required) The macro offsetof in <stddef.h> shall not be used" => "CXX-W1000",
    "(Required) The setjmp macro and the longjmp fct shall not be used" => "CXX-W1000",
    "(Required) The signal handling facilities of <signal.h> shall not be used" => "CXX-W1000",
    "(Required) <stdio.h> shall not be used in production code" => "CXX-W1000",
    "(Required) The library fcts atof, atoi and atol from library <stdlib.h> shall not be used" => "CXX-W1000",
    "(Required) The library fcts abort, exit, getenv and system from library <stdlib.h> shall not be used" => "CXX-W1000",
    "(Required) The time handling fcts of <time.h> shall not be used" => "CXX-W1234",
];

pub const MESSAGE_MAP_MISRA_2012: phf::Map<&str, &str> = phf_map![
    "(Advisory) Language extensions should not be used" => "CXX-W1168",
    "(Advisory) A fct should not contain unused label declarations" => "CXX-W1169",
    "(Advisory) There should be no unused parameters in fcts" => "CXX-W1170",
    "(Required) The character sequences /* and // shall not be used within a comment" => "CXX-W1171",
    "(Required) Line-splicing shall not be used in // comments" => "CXX-W1172",
    "(Required) Octal and hexadecimal escape sequences shall be terminated" => "CXX-W1173",
    "(Advisory) Trigraphs should not be used" => "CXX-W1174",
    "(Required) Assembly language shall be encapsulated and isolated" => "CXX-W1175",
    "(Advisory) Sections of code should not be commented out" => "CXX-W1176",
    "(Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" => "CXX-W1177",
    "(Required) Dynamic memory allocation shall not be used" => "CXX-W1178",
    "(Required) Single-bit named bit fields shall not be of a signed type" => "CXX-W1179",
    "(Required) Octal constants shall not be used" => "CXX-W1180",
    "(Required) The lowercase character l shall not be used in a literal suffix" => "CXX-W1181",
    "(Advisory) An object should be defined at block scope if its identifier only appears in a single function" => "CXX-W1182",
    "(Required) When an array with external linkage is declared, its size should be explicitly specified" => "CXX-W1183",
    "(Required) The restrict type qualifier shall not be used" => "CXX-W1184",
    "(Advisory) The comma operator should not be used" => "CXX-W1185",
    "(Advisory) The result of an assignment operator should not be used" => "CXX-W1186",
    "(Required) The right hand operand of && or || shall not contain persistent side effects" => "CXX-W1187",
    "(Mandatory) The operand of sizeof shall not have side effects" => "CXX-W1188",
    "(Advisory) The goto stmnt should not be used" => "CXX-W1189",
    "(Required) The goto stmnt shall jump to a label declared later in the same fct" => "CXX-W1190",
    "(Advisory) There should be no more than one break or goto stmnt used to terminate any iteration stmnt" => "CXX-W1191",
    "(Advisory) A fct should have a single point of exit at the end" => "CXX-W1192",
    "(Required) The body of an iteration-stmnt or a selection-stmnt shall be a compound-stmnt" => "CXX-W1193",
    "(Required) All if ... else if constructs shall be terminated with an else stmnt" => "CXX-W1194",
    "(Required) An unconditional break stmnt shall terminate every switch-clause" => "CXX-C1001",
    "(Required) Every switch stmnt shall have a default label" => "CXX-W1196",
    "(Required) Every switch stmnt shall have at least two switch-clauses" => "CXX-W1197",
    "(Required) The features of <stdarg.h> shall not be used" => "CXX-W1198",
    "(Required) Functions shall not call themselves, either directly or indirectly" => "CXX-W1199",
    "(Mandatory) All exit paths from a fct with non-void return type shall have an explicit return stmnt with an expression" => "CXX-W1200",
    "(Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]" => "CXX-W1201",
    "(Advisory) A fct parameter should not be modified" => "CXX-W1202",
    "(Advisory) Declarations should contain no more than two levels of pointer nesting" => "CXX-W1203",
    "(Required) Flexible array members shall not be declared" => "CXX-W1204",
    "(Advisory) The union keyword should not be used" => "CXX-W1205",
    "include directives should only be preceded by preprocessor directives or comments" => "CXX-W1206",
    "(Required) Single or double quote or \\ characters and the /* or // character sequences shall not occur in a header file name" => "CXX-W1207",
    "(Advisory) (Required) The #include directive shall be followed by either a <filename> or 'filename' sequence" => "CXX-W1208",
    "(Advisory) #undef should not be used" => "CXX-W1209",
    "(Advisory) The # and ## preprocessor operators should not be used" => "CXX-W1210",
    "(Required) The memory allocation and deallocation fcts of <stdlib.h> shall not be used" => "CXX-W1211",
    "(Required) The standard header file <setjmp.h> shall not be used" => "CXX-W1212",
    "(Required) The standard header file <signal.h> shall not be used" => "CXX-W1213",
    "(Required) The Standard Library input/output fcts shall not be used" => "CXX-W1214",
    "(Required) The atof, atoi, atol and atoll fcts of <stdlib.h> shall not be used" => "CXX-W1215",
    "(Required) The library fcts abort, exit, getenv and system of <stdlib.h> shall not be used" => "CXX-W1216",
    "(Required) The library fcts bsearch and qsort of <stdlib.h> shall not be used" => "CXX-W1217",
    "(Required) The standard library time and date fcts shall not be used" => "CXX-W1218",
    "(Required) The standard header file <tgmath.h> shall not be used" => "CXX-W1219",
    "(Advisory) The exception handling features of <fenv.h> should not be used" => "CXX-W1220",
];

pub const MESSAGE_MAP_CWE: phf::Map<&str, &str> = phf_map![
    "Array-index variable modified multiple times in loop" => "CXX-S1000",
    "Array-index variable with unchecked min/max value" => "CXX-S1001",
    "Unchecked parameter value used in array index" => "CXX-S1002",
    "Dangerous function calls lacking bounds checking" => "CXX-S1003",
    "printf or scanf missing width limit on %s" => "CXX-S1004",
    "Potential buffer overrun" => "CXX-S1005",
    "Possibly missing sizeof() in memory allocation" => "CXX-S1006",
    "Potential out of bound array indexing error" => "CXX-S1007",
    "Untrusted format string" => "CXX-S1008",
    "Source of memcpy is untrusted parameter" => "CXX-S1009",
    "Destination in strncpy may not be null terminated" => "CXX-S1010",
    "Potential loss of information in assignment or cast" => "CXX-S1011",
    "Potential heap memory use after free" => "CXX-S1012",
    "Potentially uninitialized variable" => "CXX-S1013",
    "Risky cast using pointer arithmetic" => "CXX-S1014",
    "Variable used in strncpy or malloc could have negative value" => "CXX-S1015",
    "Suspicious sizeof in strncpy, strncat, or memcpy" => "CXX-S1016",
    "Function may return zero or negative value (used in array index)" => "CXX-S1017"
];

pub const MESSAGE_MAP_BASIC: phf::Map<&str, &str> = phf_map![
    "Fct names also used as variables" => "CXX-W1159",
    "Inconsistent checking return value of function" => "CXX-W1160",
    "Assignment in condition not enclosed in round braces" => "CXX-W1161",
    "Empty if/else/while/for statements" => "CXX-W1162",
    "Modifying the control variable of a for loop inside the loop body" => "CXX-W1163",
    "Missing default in switch statement" => "CXX-W1164",
    "Missing else at end of if-else-if chain" => "CXX-W1165",
    "Macro argument not enclosed in parentheses" => "CXX-W1166",
    "Mismatch of formal and actual parameters"=> "CXX-W1167",
];

pub const MESSAGE_MAP_SUSPICIOUS: phf::Map<&str, &str> = phf_map![
    "deref of fct return value on lhs of =" => "CXX-W1230",
    "multiple side effects in expression" => "CXX-W1231",
    "unused variable declaration in a block" => "CXX-W1232",
    "non-void functions failing to return a value" => "CXX-W1233",
    "non-void functions without return statement" => "CXX-W1233",
    "blocks that contain calls to malloc but not free" => "CXX-W1235",
    "local declaration of static variable" => "CXX-W1236",
    "reverse null check" => "CXX-W1237",
    "if-then-else-if chain not ending with else" => "CXX-W1238",
    "non-standard for statement" => "CXX-W1240",
    "modifies control var of for-loop in body" => "CXX-W1241",
    "match gotos immediately followed by the target label" => "CXX-W1242",
    "loop body is not enclosed in { }" => "CXX-W1243",
    "body of if-statement is not enclosed in { }" => "CXX-W1244",
    "switch statement without a default" => "CXX-W1245",
    "typedefs for pointers must have a ptr suffix" => "CXX-W1246",
    "side effect in array index" => "CXX-W1247",
    "using return value of a fct in its first parameter" => "CXX-W1248",
    "result of snprintf may not used as offset in call" => "CXX-W1249",
    "cwe_119_2: array indexed with unchecked return val of fct" => "CXX-W1250",
    "cwe_119_3: param not checked before use as array index" => "CXX-W1251",
    "cwe_120_2: omits checking size of input" => "CXX-W1252",
    "cwe_134: param value not checked before use in memcpy" => "CXX-W1253",
    "cwe_416: possible use after free" => "CXX-W1254",
    "cwe_457: possible use of uninitialized data" => "CXX-W1255",
    "cwe_457: unused data" => "CXX-W1256",
    "cwe_468: pointer arithmetic" => "CXX-W1257",
    "cwe_805: buffer access with potentially negative value" => "CXX-W1258",
    "use of result of snprintf as offset" => "CXX-W1259",
    "fct does not always return value" => "CXX-W1260",
    "fails to check return value of fct" => "CXX-W1261",
    "there should be no _ in a typedef name" => "CXX-W1262",
    "explicitly negative array index" => "CXX-W1263",
    "potential division by zero" => "CXX-W1264",
    "multiple binary operators, without braces" => "CXX-W1265",
    "in macro defs, arguments must be enclosed in braces" => "CXX-W1266",
    "empty if/for/else statements" => "CXX-W1267",
    "unexpected null statement" => "CXX-W1268",
    "same var or fct name preceded by different type" => "CXX-W1269",
];

pub const MESSAGE_MAP_AUTOSAR_CPP: phf::Map<&str, &str> = phf_map![
    "(Required) A project shall not contain unreachable code." => "CXX-W1001",
    "(Required) A project shall not contain unused variables." => "CXX-W1002",
    "(Required) A project shall not contain non-volatile POD (plain old data) variables having only one use." => "CXX-W1003",
    "(Required) A project shall not contain unused type declarations." => "CXX-W1004",
    "(Required) A project shall not contain instances of non-volatile variables being given values that are not subsequently used." => "CXX-W1005",
    "(Required) The value returned by a function having a non-void return type that is not an overloaded operator shall be used." => "CXX-W1006",
    "(Required) There shall be no dead code." => "CXX-W1007",
    "(Advisory) Every defined function should be called at least once." => "CXX-W1008",
    "(Required) There shall be no unused parameters (named or unnamed) in non-virtual functions." => "CXX-W1009",
    "(Required) Do not use unions; An object shall not be assigned to an overlapping object." => "CXX-W1010",
    "(Required) Type long double shall not be used." => "CXX-W1011",
    "(Required) All code shall conform to ISO/IEC 14882:2014 -Programming Language C++ and shall not use deprecated features." => "CXX-W1012",
    "(Required) Limit functions to no more than N lines." => "CXX-W1013",
    "(Required) Use no more than M parameters per function." => "CXX-W1014",
    "(Required) Use no more than 3 levels of indirection." => "CXX-W1015",
    "(Required) Trigraphs shall not be used" => "CXX-W1016",
    "(Required) Digraphs shall not be used." => "CXX-W1017",
    "(Required) The character \\ shall not occur as a last character of a C++ comment." => "CXX-W1018",
    "(Required) Sections of code shall not be commented out." => "CXX-W1019",
    "(Required) Declarations of user-defined types, static and non-static data members, functions and methods shall be preceded by documentation using /// comments and @tag tags." => "CXX-W1020",
    "(Required)  C-style comments shall not be used." => "CXX-W1021",
    "(Required) Different identifiers shall be typographically unambiguous." => "CXX-W1022",
    "(Required) An identifier declared in an inner scope shall not hide an identifier declared in an outer scope." => "CXX-W1023",
    "(Required) A typedef name (including qualification, if any) shall be a unique identifier." => "CXX-W1024",
    "(Required) A using name shall be a unique identifier within a namespace." => "CXX-W1025",
    "(Required) A user-defined type name shall be a unique identifier within a namespace." => "CXX-W1026",
    "(Required)  The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace." => "CXX-W1027",
    "(Advisory) An identifier name of a non-member object or function with static storage duration should not be reused." => "CXX-W1028",
    "(Required) If an identifier refers to a type, it shall not also refer to an object or a function [in the same scope]." => "CXX-W1029",
    "(Required) Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used." => "CXX-W1030",
    "(Required) Octal constants (other than zero) and octal escape sequences (other than \0 ) shall not be used." => "CXX-W1031",
    "(Required) A U suffix shall be applied to all octal or hexadecimal integer literals of unsigned type. (Double-Check)" => "CXX-W1032",
    "(Required)  Literal suffixes shall be upper case." => "CXX-W1033",
    "(Required) String literals with different encoding prefixes shall not be concatenated." => "CXX-W1034",
    "(Required) Type wchar_t shall not be used." => "CXX-W1035",
    "(Required) Header files, that are defined locally in the project, shall have a file name extension of one of: .h, .hpp or .hxx" => "CXX-W1036",
    "(Required) Functions shall not be declared at block scope." => "CXX-W1037",
    "(Required) When an array with external linkage is declared, its size shall be stated explicitly." => "CXX-W1038",
    "(Required) Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file." => "CXX-W1039",
    "(Required) Non-POD type objects with static storage duration shall not be used." => "CXX-W1040",
    "(Required) Fixed width integer types from <cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types." => "CXX-W1041",
    "(Required) The underlying bit representations of floating-point values shall not be used." => "CXX-W1042",
    "(Required) Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary & operator." => "CXX-W1043",
    "(Required) NULL shall not be used as an integer value." => "CXX-W1044",
    "(Required) Only nullptr literal shall be used as the null-pointer-constant. (Verify)" => "CXX-W1045",
    "(Required) Literal zero (0) shall not be used as the null-pointer-constant." => "CXX-W1046",
    "(Required) The value of an expression shall be the same under any order of evaluation that the standard permits." => "CXX-W1047",
    "(Required) The condition of an if-statement and the condition of an iteration statement shall have type bool." => "CXX-W1048",
    "(Required) Array indexing shall be the only form of pointer arithmetic." => "CXX-W1049",
    "(Required) The declaration of objects shall contain no more than two levels of pointer indirection." => "CXX-W1050",
    "(Required) Non-constant operands to a binary bitwise operator shall have the same underlying type." => "CXX-W1051",
    "(Required) Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead." => "CXX-W1052",
    "(Advisory) Return type of a non-void return type lambda expression should be explicitly specified." => "CXX-W1053",
    "(Advisory) Lambda expressions should not be defined inside another lambda expression." => "CXX-W1054",
    "(Required) Each operand of a logical &&, || shall be a postfix expression." => "CXX-W1055",
    "(Advisory) Dynamic_cast should not be used." => "CXX-W1056",
    "(Required) Traditional C-style casts shall not be used." => "CXX-W1057",
    "(Required) reinterpret_cast shall not be used." => "CXX-W1058",
    "(Required) The increment (++) and decrement (--) operators shall not be mixed with other operators in an expression." => "CXX-W1059",
    "(Required) The comma operator, && operator and the || operator shall not be overloaded." => "CXX-W1060",
    "(Required) An identifier with array type passed as a function argument shall not decay to a pointer." => "CXX-W1061",
    "(Required) Each operand of the ! operator, the logical && or the logical || operators shall have type bool." => "CXX-W1062",
    "(Required) The unary & operator shall not be overloaded." => "CXX-W1063",
    "(Required) Evaluation of the operand to the sizeof operator shall not contain side effects." => "CXX-W1064",
    "(Required) Evaluation of the operand to the typeid operator shall not contain side effects." => "CXX-W1065",
    "(Required) The right hand operand of a logical &&, || operators shall not contain side effects." => "CXX-W1066",
    "(Required) The ternary conditional operator shall not be used as a sub-expression." => "CXX-W1067",
    "(Required) The comma operator shall not be used." => "CXX-W1068",
    "(Required) Assignment operators shall not be used in sub-expressions." => "CXX-W1069",
    "Floating-point expressions shall not be directly or indirectly tested for equality or inequality." => "CXX-W1070",
    "(Required) A null statement shall only occur on a line by itself." => "CXX-W1071",
    "(Required) The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement." => "CXX-W1072",
    "(Required) The else keyword shall be followed by either a compound statement, or another if statement." => "CXX-W1073",
    "(Required) All if ... else if constructs shall be terminated with an else clause." => "CXX-W1074",
    "(Required) A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement." => "CXX-W1075",
    "(Required) An unconditional throw or break statement shall terminate every non-empty switch-clause." => "CXX-W1076",
    "The final clause of a switch statement shall be the default-clause." => "CXX-W1077",
    "(Required) The condition of a switch statement shall not have bool type." => "CXX-W1078",
    "(Required) A switch statement shall have at least two case-clauses, distinct from the default label." => "CXX-W1079",
    "(Required) A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used." => "CXX-W1080",
    "(Required) A for loop shall contain a single loop-counter which shall not have floating- point type." => "CXX-W1081",
    "(Required) The loop-counter shall not be modified within condition or statement." => "CXX-W1082",
    "(Required) The loop-counter shall be modified by one of: --, ++, -= n, or += n; where n remains constant for the duration of the loop." => "CXX-W1083",
    "(Required) A loop-control-variable other than the loop-counter shall not be modified within condition or expression." => "CXX-W1084",
    "(Required) The goto statement shall not be used." => "CXX-W1085",
    "(Required) Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement." => "CXX-W1086",
    "(Required) The goto statement shall jump to a label declared later in the same function body." => "CXX-W1087",
    "(Required) The register keyword shall not be used." => "CXX-W1088",
    "(Required) The typedef specifier shall not be used." => "CXX-W1089",
    "(Required) Each identifier shall be declared on a separate line." => "CXX-W1090",
    "(Required) A non-type specifier shall be placed before a type specifier in a declaration." => "CXX-W1091",
    "(Required) Enumeration underlying base type shall be explicitly defined." => "CXX-W1092",
    "(Required) Enumerations shall be declared as scoped enum classes." => "CXX-W1093",
    "(Required) In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized." => "CXX-W1094",
    "The global namespace shall only contain main, namespace declarations and extern C declarations." => "CXX-W1095",
    "(Required) The identifier main shall not be used for a function other than the global function main." => "CXX-W1096",
    "(Required) Using-directives shall not be used." => "CXX-W1097",
    "(Required) The asm declaration shall not be used." => "CXX-W1098",
    "(Required) A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function." => "CXX-W1099",
    "(Required) Functions shall not call themselves, either directly or indirectly." => "CXX-W1100",
    "(Required) Functions shall not be defined using the ellipsis notation." => "CXX-W1101",
    "(Required) All exit paths from a function with non-void return type shall have an explicit return statement with an expression." => "CXX-W1102",
    "(Required) A function identifier shall either be used to call the function or it shall be preceded by &" => "CXX-W1103",
    "(Required) All variables shall have a defined value before they are used." => "CXX-W1104",
    "(Required) A variable of type auto shall not be initialized using {} or ={} braced- initialization." => "CXX-W1105",
    "(Required) Unions shall not be used." => "CXX-W1106",
    "(Required) Bit-fields shall be either unsigned integral, or enumeration (with underlying type of unsigned integral type)." => "CXX-W1107",
    "(Required) Virtual function declaration shall contain exactly one of the three specifiers: (1) virtual, (2) override, (3) final." => "CXX-W1108",
    "(Required) Virtual functions shall not be introduced in a final class." => "CXX-W1109",
    "(Required) A user-defined assignment operator shall not be virtual." => "CXX-W1110",
    "(Required) Friend declarations shall not be used." => "CXX-W1111",
    "(Required) All constructors that are callable with a single argument of fundamental type shall be declared explicit." => "CXX-W1112",
    "(Required) Destructor of a base class shall be public virtual, public override or protected non-virtual." => "CXX-W1113",
    "(Advisory) Assignment operators should be declared with the ref-qualifier &." => "CXX-W1114",
    "(Required) User-defined literals shall not be used." => "CXX-W1115",
    "(Required) User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters." => "CXX-W1116",
    "(Required) A relational operator shall return a boolean value." => "CXX-W1117",
    "(Required) Digit sequences separators ' shall only be used as follows: (1) for decimal, every 3 digits, (2) for hexadecimal, every 2 digits, (3) for binary, every 4 digits." => "CXX-W1118",
    "(Required) Only instances of types derived from std::exception shall be thrown." => "CXX-W1119",
    "(Required) An exception object shall not be a pointer." => "CXX-W1120",
    "(Required) Control shall not be transferred into a try or catch block using a goto or a switch statement." => "CXX-W1121",
    "(Required) NULL shall not be thrown explicitly." => "CXX-W1122",
    "(Required) An empty throw (throw;) shall only be used in the compound statement of a catch handler." => "CXX-W1123",
    "(Required) There shall be at least one exception handler to catch all otherwise unhandled exceptions." => "CXX-W1124",
    "(Required) Dynamic exception-specification shall not be used." => "CXX-W1125",
    "If a function is declared to be noexcept, noexcept(true) or noexcept(<true condition>), then it shall not exit with an exception." => "CXX-W1126",
    "(Required) Program shall not be abruptly terminated. In particular, an implicit or explicit invocation of std::abort(), std::quick_exit(), std::_Exit(), std::terminate() shall not be done." => "CXX-W1127",
    "(Required) The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include." => "CXX-W1128",
    "(Required) #include directives in a file shall only be preceded by other pre-processor directives or comments." => "CXX-W1129",
    "(Required) Macros shall only be #define-d or #undef-d in the global namespace." => "CXX-W1130",
    "(Required) Arguments to a function-like macro shall not contain tokens that look like pre-processing directives." => "CXX-W1131",
    "(Required) In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##." => "CXX-W1132",
    "(Required) If the # token appears as the first token on a line, then it shall be immediately followed by a pre-processing token." => "CXX-W1133",
    "(Required) The defined pre-processor operator shall only be used in one of the two standard forms." => "CXX-W1134",
    "(Required) All #else, #elif and #endif pre-processor directives shall reside in the same file as the #if or #ifdef directive to which they are related." => "CXX-W1135",
    "(Required) Include guards shall be provided." => "CXX-W1136",
    "(Required) The singlequote, doublequote, /*, //, \\ characters shall not occur in a header file name or in #include directive." => "CXX-W1137",
    "(Required) There shall be at most one occurrence of the # or ## operators in a single macro definition." => "CXX-W1138",
    "(Required) The # and ## operators should not be used." => "CXX-W1139",
    "(Required) The #error directive shall not be used." => "CXX-W1140",
    "(Required) The #pragma directive shall not be used" => "CXX-W1141",
    "(Required) Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined." => "CXX-W1142",
    "(Required) The setjmp macro and the longjmp function shall not be used." => "CXX-W1143",
    "(Required) The library functions atof, atoi and atol from library <cstdlib> shall not be used." => "CXX-W1144",
    "(Required) The library functions abort, exit, getenv and system from library <cstdlib> shall not be used." => "CXX-W1145",
    "(Required) The time handling functions of library <ctime> shall not be used." => "CXX-W1146",
    "(Required) The library <clocale> (locale.h) and the setlocale function shall not be used." => "CXX-W1147",
    "(Advisory) C-style arrays should not be used." => "CXX-W1148",
    "(Required) The std::vector<bool> shall not be used." => "CXX-W1149",
    "(Required) The std::auto_ptr shall not be used." => "CXX-W1150",
    "(Required) The std::unique_ptr shall not be passed to a function by const reference." => "CXX-W1151",
    "(Required) The macro offsetof shall not be used." => "CXX-W1152",
    "(Required) Functions malloc, calloc, realloc and free shall not be used." => "CXX-W1153",
    "(Required) The signal handling facilities of <csignal> shall not be used." => "CXX-W1154",
    "(Required) The std::bind shall not be used." => "CXX-W1155",
    "(Required) An argument to std::forward shall not be subsequently used." => "CXX-W1156",
    "(Rquired) The error indicator errno shall not be used." => "CXX-W1157",
    "(Required) The stream input/output library <cstdio> shall not be used." => "CXX-W1158",
];
